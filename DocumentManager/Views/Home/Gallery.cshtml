@using System.Web.UI.HtmlControls
@using System.Web.UI.WebControls
@using GdPicture14
@{
    Layout = null;
}


@model DocumentManager.Models.GalleryModel
    @using System.Configuration;



<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>DocuVieware - Gallery Demo.</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="http://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet" type="text/css" />
    <script src="~/Scripts/jquery-3.1.0.min.js"></script>
    <script src="~/Scripts/docuvieware-min.js"></script>
    <link href="~/Content/docuvieware-min.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/gallery.css" rel="stylesheet" type="text/css" />
</head>
@{

    bool ShowAnnotationsCommentsSnapInValue = Boolean.Parse(ConfigurationManager.AppSettings["ShowAnnotationsCommentsSnapIn"]);
    bool ShowAnnotationsSnapInValue = Boolean.Parse(ConfigurationManager.AppSettings["ShowAnnotationsSnapIn"]);
    bool ShowRedactionSnapInValue = Boolean.Parse(ConfigurationManager.AppSettings["ShowRedactionSnapIn"]);
    bool EnableSaveButtonValue = Boolean.Parse(ConfigurationManager.AppSettings["EnableSaveButton"]);
    bool EnableFileUploadButtonValue = Boolean.Parse(ConfigurationManager.AppSettings["EnableFileUploadButton"]);
    bool EnableLoadFromUriButtonValue = Boolean.Parse(ConfigurationManager.AppSettings["EnableLoadFromUriButton"]);
    bool EnablePrintButtonValue = Boolean.Parse(ConfigurationManager.AppSettings["EnablePrintButton"]);

    if (User.GetType().ToString() == "admin")
    {
        ShowAnnotationsCommentsSnapInValue = true;
        ShowAnnotationsSnapInValue = true;
        ShowRedactionSnapInValue = true;
        EnableSaveButtonValue = true;
        EnableFileUploadButtonValue = true;
        EnableLoadFromUriButtonValue = true;
        EnablePrintButtonValue = true;
    }
       
    GdPicture14.WEB.DocuVieware docuVieware = new GdPicture14.WEB.DocuVieware
    {
        ID = "DocuVieware1",
        Timeout = MvcApplication.SESSION_TIMEOUT,
        Height = new Unit("100%"),
        Width = new Unit("100%"),
        SinglePageView = false,
        ForceScrollBars = false,
        AllowedExportFormats = "*",
        DocumentAlignment = ViewerDocumentAlignment.DocumentAlignmentTopLeft,
        EnableMultipleThumbnailSelection = true,
        EnableMouseModeButtons = false,
        EnableTwainAcquisitionButton = false,
        EnableFormFieldsEdition = false,

        ShowAnnotationsCommentsSnapIn = ShowAnnotationsCommentsSnapInValue,
        ShowAnnotationsSnapIn = ShowAnnotationsSnapInValue,
        ShowRedactionSnapIn = ShowRedactionSnapInValue,
        EnableSaveButton = EnableSaveButtonValue,
        EnableFileUploadButton = EnableFileUploadButtonValue,
        EnableLoadFromUriButton = EnableLoadFromUriButtonValue,
        EnablePrintButton = EnablePrintButtonValue

    };
}
<body>
    <div id="gallery">
        <div id="gallery_icon_container">
            <div id="gallery_icon">
                <svg height="100%" width="100%" viewBox="0 0 512 512">
                    <path d="M382.5,139.5v-70h-62v-69h-261v372h62v70h70v70h261v-373H382.5z M81.5,350.5v-328h216v328H81.5z M144.5,420.5v-48h176v-280 h40v328H144.5z M430.5,489.5h-216v-47h168v-281h48V489.5z" />
                    <rect x="104.5" y="194.5" width="168" height="23" />
                    <rect x="103.5" y="243.5" width="168" height="23" />
                    <rect x="104.5" y="292.5" width="84" height="23" />
                    <path d="M104.5,50.5v117h168v-117H104.5z M250.5,146.5h-123v-73h123V146.5z" />
                </svg>
            </div>
            <span id="gallery_header_title">Document Gallery</span>
        </div>
        <div id="gallery_panel_content">
            <div id="gallery_container">
                @{

                    string LogFileName = System.Web.HttpContext.Current.Session["LogFileName"].ToString();
                    string log = string.Empty;

                    log += ("Before Calling Gallery view - " + DateTime.Now + System.Environment.NewLine);



                    bool firstDoc = true;

                    foreach (var doc in Model.fileDetails)
                    {
                        DocumentFormat documentFormat = DocumentFormat.DocumentFormatUNKNOWN;
                        int pageCount = 0;
                        GdPictureDocumentUtilities.GetDocumentPreview(new System.IO.MemoryStream(doc.FileContent), doc.FileName, ref documentFormat, ref pageCount);

                        if (documentFormat != DocumentFormat.DocumentFormatUNKNOWN)
                        {
                            using (HtmlGenericControl thumbnailContainer = new HtmlGenericControl("div"))
                            {
                                thumbnailContainer.Attributes["class"] = "thumbnail_container";

                                using (ImageButton btn = new ImageButton())
                                {
                                    btn.ImageUrl = Url.Action("GalleryGetDocumentThumbnail", "Home", new { doc = HttpUtility.UrlEncode(Path.GetFileName(doc.FileName)) });
                                    btn.Attributes["class"] = "thumbnail_button";

                                    btn.OnClientClick = "loadDocument('" + doc.Id + "', this); return false;";
                                    //btn.OnClientClick = "loadDocument('" + HttpUtility.UrlEncode(Path.GetFileName(doc.FileName)) + "', this); return false;";                           

                                    if (firstDoc)
                                    {
                                        thumbnailContainer.Attributes["class"] += " item-selected";
                                        firstDoc = false;
                                        log += ("Before Reading the file - " + DateTime.Now + System.Environment.NewLine);
                                        docuVieware.LoadFromStream(new System.IO.MemoryStream(Model.fileModel[0].FileContent), true, Model.fileModel[0].FileName);
                                        log += ("After reading the file  - " + DateTime.Now + System.Environment.NewLine);
                                    }
                                    thumbnailContainer.Controls.Add(btn);
                                }
                                using (HtmlGenericControl titleThumbnail = new HtmlGenericControl("div"))
                                {
                                    titleThumbnail.InnerHtml = doc.FileName + " <br />" + pageCount + " page" + (pageCount > 1 ? "s" : "<br/>");
                                    thumbnailContainer.Controls.Add(titleThumbnail);
                                }
                                thumbnailContainer.RenderControl(new HtmlTextWriter(Output));
                            }
                        }
                    }

                    System.IO.File.AppendAllText(@MvcApplication.GetDocumentsDirectory() + "\\Logs\\" + LogFileName + "", log);
                }
            </div>
        </div>
    </div>
    <div id="viewer_container">
        @{
            docuVieware.RenderControl(Output);
            docuVieware.Dispose();
        }
    </div>
    <script>
        function loadDocument(doc, elem) {
            if (doc) {
                DocuViewareAPI.PostCustomServerAction('DocuVieware1', true, 'load', decodeURIComponent(doc),
                    function () {
                        resetButtons();
                        elem.parentElement.className += " item-selected";
                    },
                    function () {
                        resetButtons();
                    }
                );
            }
        }
        function resetButtons() {
            for (var i = 0; i < document.getElementById("gallery_container").children.length; i++) {
                document.getElementById("gallery_container").children[i].className = "thumbnail_container";
            }
        }
    </script>
</body>
</html>
